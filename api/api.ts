/* tslint:disable */
/* eslint-disable */
/**
 * Template
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BadRequestException
 */
export interface BadRequestException {
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof BadRequestException
     */
    'message': string | null;
    /**
     * エラーコード
     * @type {string}
     * @memberof BadRequestException
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ConflictException
 */
export interface ConflictException {
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ConflictException
     */
    'message': string | null;
    /**
     * エラーコード
     * @type {string}
     * @memberof ConflictException
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ForbiddenException
 */
export interface ForbiddenException {
    /**
     * エラー内容のメッセージ
     * @type {string}
     * @memberof ForbiddenException
     */
    'message': string;
    /**
     * エラーコード
     * @type {string}
     * @memberof ForbiddenException
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordParameter
 */
export interface ForgotPasswordParameter {
    /**
     * メールアドレス
     * @type {string}
     * @memberof ForgotPasswordParameter
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface LoginUserParameter
 */
export interface LoginUserParameter {
    /**
     * メールアドレス
     * @type {string}
     * @memberof LoginUserParameter
     */
    'email': string;
    /**
     * パスワード
     * @type {string}
     * @memberof LoginUserParameter
     */
    'password': string;
}
/**
 * アクセストークンのデータ
 * @export
 * @interface LoginUserTokenData
 */
export interface LoginUserTokenData {
    /**
     * アクセストークン
     * @type {string}
     * @memberof LoginUserTokenData
     */
    'access_token': string;
    /**
     * トークンタイプ
     * @type {string}
     * @memberof LoginUserTokenData
     */
    'token_type': string;
    /**
     * 有効期限（単位：秒数）
     * @type {number}
     * @memberof LoginUserTokenData
     */
    'expires_in': number;
}
/**
 * 
 * @export
 * @interface NotFoundException
 */
export interface NotFoundException {
    /**
     * エラー内容のメッセージ
     * @type {string}
     * @memberof NotFoundException
     */
    'message': string;
    /**
     * エラーコード
     * @type {string}
     * @memberof NotFoundException
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordParameter
 */
export interface ResetPasswordParameter {
    /**
     * 認証用一時トークン
     * @type {string}
     * @memberof ResetPasswordParameter
     */
    'token': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ResetPasswordParameter
     */
    'email': string;
    /**
     * パスワード
     * @type {string}
     * @memberof ResetPasswordParameter
     */
    'password': string;
    /**
     * パスワード
     * @type {string}
     * @memberof ResetPasswordParameter
     */
    'password_confirmation': string;
}
/**
 * 
 * @export
 * @interface TooManyRequestsException
 */
export interface TooManyRequestsException {
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof TooManyRequestsException
     */
    'message': string | null;
    /**
     * エラーコード
     * @type {string}
     * @memberof TooManyRequestsException
     */
    'code': string;
    /**
     * 
     * @type {TooManyRequestsExceptionLockout}
     * @memberof TooManyRequestsException
     */
    'lockout': TooManyRequestsExceptionLockout;
}
/**
 * 
 * @export
 * @interface TooManyRequestsExceptionLockout
 */
export interface TooManyRequestsExceptionLockout {
    /**
     * 秒数
     * @type {number}
     * @memberof TooManyRequestsExceptionLockout
     */
    'seconds': number;
    /**
     * 分数
     * @type {number}
     * @memberof TooManyRequestsExceptionLockout
     */
    'minutes': number;
}
/**
 * 
 * @export
 * @interface UnauthorizedException
 */
export interface UnauthorizedException {
    /**
     * エラー内容のメッセージ
     * @type {string}
     * @memberof UnauthorizedException
     */
    'message': string;
    /**
     * エラーコード
     * @type {string}
     * @memberof UnauthorizedException
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorResponse
 */
export interface ValidationErrorResponse {
    /**
     * 
     * @type {ValidationErrors}
     * @memberof ValidationErrorResponse
     */
    'errors': ValidationErrors;
}
/**
 * 
 * @export
 * @interface ValidationErrors
 */
export interface ValidationErrors {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationErrors
     */
    'keys': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationErrors
     */
    'values': Array<string>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * パスワード再設定のメールを送信します。 送信メールのURLのクエリパラメーターとして`email`と`token`を付与します。 パスワードリセットのときはこの`email`と`token`を利用してください。
         * @summary パスワードリセットメールの送信
         * @param {ForgotPasswordParameter} [forgotPasswordParameter] パスワードリセットメールの送信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (forgotPasswordParameter?: ForgotPasswordParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/forgot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordParameter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのログインです。 アクセストークンの有効期限は60分です。
         * @summary ユーザーログイン
         * @param {LoginUserParameter} [loginUserParameter] ログインパラメーター
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: async (loginUserParameter?: LoginUserParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserParameter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのアクセストークンを失効させます。 セキュリティ向上のために必ず利用してください。
         * @summary ログアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アクセストークンの有効期限が切れた場合はこちらでアクセストークンの再発行を行ってください
         * @summary アクセストークンの再発行
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshUserAccessToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのパスワードを再設定します。 パスワードリセットメールに添付のURLのクエリパラメーター`email`と`token`を使用してください。
         * @summary パスワードリセット
         * @param {ResetPasswordParameter} [resetPasswordParameter] パスワードリセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (resetPasswordParameter?: ResetPasswordParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordParameter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * パスワード再設定のメールを送信します。 送信メールのURLのクエリパラメーターとして`email`と`token`を付与します。 パスワードリセットのときはこの`email`と`token`を利用してください。
         * @summary パスワードリセットメールの送信
         * @param {ForgotPasswordParameter} [forgotPasswordParameter] パスワードリセットメールの送信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(forgotPasswordParameter?: ForgotPasswordParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(forgotPasswordParameter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのログインです。 アクセストークンの有効期限は60分です。
         * @summary ユーザーログイン
         * @param {LoginUserParameter} [loginUserParameter] ログインパラメーター
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUser(loginUserParameter?: LoginUserParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserTokenData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(loginUserParameter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのアクセストークンを失効させます。 セキュリティ向上のために必ず利用してください。
         * @summary ログアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アクセストークンの有効期限が切れた場合はこちらでアクセストークンの再発行を行ってください
         * @summary アクセストークンの再発行
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshUserAccessToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserTokenData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshUserAccessToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのパスワードを再設定します。 パスワードリセットメールに添付のURLのクエリパラメーター`email`と`token`を使用してください。
         * @summary パスワードリセット
         * @param {ResetPasswordParameter} [resetPasswordParameter] パスワードリセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(resetPasswordParameter?: ResetPasswordParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserTokenData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(resetPasswordParameter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * パスワード再設定のメールを送信します。 送信メールのURLのクエリパラメーターとして`email`と`token`を付与します。 パスワードリセットのときはこの`email`と`token`を利用してください。
         * @summary パスワードリセットメールの送信
         * @param {ForgotPasswordParameter} [forgotPasswordParameter] パスワードリセットメールの送信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(forgotPasswordParameter?: ForgotPasswordParameter, options?: any): AxiosPromise<object> {
            return localVarFp.forgotPassword(forgotPasswordParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのログインです。 アクセストークンの有効期限は60分です。
         * @summary ユーザーログイン
         * @param {LoginUserParameter} [loginUserParameter] ログインパラメーター
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(loginUserParameter?: LoginUserParameter, options?: any): AxiosPromise<LoginUserTokenData> {
            return localVarFp.loginUser(loginUserParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのアクセストークンを失効させます。 セキュリティ向上のために必ず利用してください。
         * @summary ログアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options?: any): AxiosPromise<object> {
            return localVarFp.logoutUser(options).then((request) => request(axios, basePath));
        },
        /**
         * アクセストークンの有効期限が切れた場合はこちらでアクセストークンの再発行を行ってください
         * @summary アクセストークンの再発行
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshUserAccessToken(options?: any): AxiosPromise<LoginUserTokenData> {
            return localVarFp.refreshUserAccessToken(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのパスワードを再設定します。 パスワードリセットメールに添付のURLのクエリパラメーター`email`と`token`を使用してください。
         * @summary パスワードリセット
         * @param {ResetPasswordParameter} [resetPasswordParameter] パスワードリセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(resetPasswordParameter?: ResetPasswordParameter, options?: any): AxiosPromise<LoginUserTokenData> {
            return localVarFp.resetPassword(resetPasswordParameter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * パスワード再設定のメールを送信します。 送信メールのURLのクエリパラメーターとして`email`と`token`を付与します。 パスワードリセットのときはこの`email`と`token`を利用してください。
     * @summary パスワードリセットメールの送信
     * @param {ForgotPasswordParameter} [forgotPasswordParameter] パスワードリセットメールの送信
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public forgotPassword(forgotPasswordParameter?: ForgotPasswordParameter, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).forgotPassword(forgotPasswordParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのログインです。 アクセストークンの有効期限は60分です。
     * @summary ユーザーログイン
     * @param {LoginUserParameter} [loginUserParameter] ログインパラメーター
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginUser(loginUserParameter?: LoginUserParameter, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginUser(loginUserParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのアクセストークンを失効させます。 セキュリティ向上のために必ず利用してください。
     * @summary ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logoutUser(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).logoutUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アクセストークンの有効期限が切れた場合はこちらでアクセストークンの再発行を行ってください
     * @summary アクセストークンの再発行
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshUserAccessToken(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshUserAccessToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのパスワードを再設定します。 パスワードリセットメールに添付のURLのクエリパラメーター`email`と`token`を使用してください。
     * @summary パスワードリセット
     * @param {ResetPasswordParameter} [resetPasswordParameter] パスワードリセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public resetPassword(resetPasswordParameter?: ResetPasswordParameter, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).resetPassword(resetPasswordParameter, options).then((request) => request(this.axios, this.basePath));
    }
}


